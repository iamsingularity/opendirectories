// Generated by CoffeeScript 1.9.3
(function() {
  var app, debug, icons, port, server;

  app = angular.module("opendl-downloader", ["ng-token-auth", "ngAria", "ngAnimate", "ngMaterial", "ngMdIcons", "opendl-downloader.auth"]);

  icons = {
    initial: "cloud_circle",
    queued: "cloud",
    started: "cloud_download",
    finished: "done",
    error: "error",
    cancelled: "cloud_off"
  };

  debug = true;

  app.service("Logging", [
    function() {
      return {
        debug: function(message) {
          if (debug) {
            return console.debug(message);
          }
        }
      };
    }
  ]);

  server = "localhost";

  port = 3000;

  app.factory("Server", [
    function() {
      return {
        service: {
          toString: function() {
            return "http://" + this.server + ":" + this.port;
          },
          server: server,
          port: port,
          build: function(path) {
            return "http://" + this.server + ":" + this.port + path;
          }
        }
      };
    }
  ]);

  app.config(function($authProvider) {
    return $authProvider.configure({
      apiUrl: "http://" + server + ":" + port
    });
  });

  app.controller("appController", [
    "$scope", "$rootScope", "$mdMedia", "$http", "$mdDialog", "Server", "Logging", "$auth", function($scope, $rootScope, $mdMedia, $http, $mdDialog, Server, Logging, $auth) {
      var deleteDownload, parseInitials;
      $scope.Server = Server;
      $scope.path = "Authenticate";
      $scope.user = null;
      parseInitials = function() {
        var initials, split;
        initials = (function() {
          var i, len, ref, results;
          ref = $scope.user.email.split(/@/);
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            split = ref[i];
            results.push(split[0].toUpperCase());
          }
          return results;
        })();
        return $scope.user.initials = initials.slice(0, 2).join("");
      };
      $auth.validateUser().then(function(data) {
        $scope.user = data;
        parseInitials();
        return $scope.getDownloads();
      }, function() {
        return $mdDialog.show({
          templateUrl: "log-in.html",
          controller: "authController",
          clickOutsideToClose: false
        });
      });
      $scope.logOut = function() {
        return $auth.signOut().then(function() {
          $scope.downloads = [];
          $scope.user = null;
          return $mdDialog.show({
            templateUrl: "log-in.html",
            controller: "authController",
            clickOutsideToClose: false
          });
        });
      };
      $rootScope.$on("auth:login-success", function(ev, user) {
        $scope.user = user;
        return parseInitials();
      });
      $rootScope.$on("reload", function() {
        return $scope.getDownloads();
      });
      $scope.getDownloads = function() {
        $scope.path = "Downloads";
        return $http({
          method: "GET",
          url: Server.service.build("/api/v1/downloads.json"),
          dataType: "jsonp"
        }).success(function(data) {
          var item;
          data.items = (function() {
            var i, len, ref, results;
            ref = data.items;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              item = JSON.parse(item);
              item.visible = false;
              item.icon = icons[item.status];
              item.hasPointer = item.status !== "initial" && item.status !== "queued";
              item.canDelete = item.status !== "started" && item.status !== "queued";
              item.canCancel = item.status === "queued";
              item.canQueue = item.status === "initial" || item.status === "finished" || item.status === "error" || item.status === "cancelled";
              results.push(item);
            }
            return results;
          })();
          return $scope.downloads = data;
        });
      };
      $scope.newDownload = function($event) {
        $scope.path = "New Download";
        return $mdDialog.show({
          templateUrl: "new-download.html",
          controller: "DialogController",
          clickOutsideToClose: false
        }).then(function() {
          return $scope.getDownloads();
        });
      };
      $scope.deleteDownload = function(download, $event) {
        var confirm;
        $scope.path = "Delete Download";
        confirm = $mdDialog.confirm().title("Delete Download").content("Are you sure you want to delete '" + download.url + "'?").ok("BE GONE WITH IT!").cancel("No").targetEvent($event);
        return $mdDialog.show(confirm).then((function() {
          return deleteDownload(download);
        }), function() {
          return $scope.getDownloads();
        });
      };
      deleteDownload = function(download) {
        if (!download.canDelete) {
          return;
        }
        return $http({
          method: "DELETE",
          url: Server.service.build("/api/v1/downloads/" + download.id),
          dataType: "jsonp"
        }).success(function() {
          return $scope.getDownloads();
        });
      };
      $scope.cancelDownload = function(download) {
        if (!download.canCancel) {
          return;
        }
        return $http({
          method: "PUT",
          url: Server.service.build("/api/v1/downloads/" + download.id + "/cancel"),
          dataType: "jsonp"
        }).success(function() {
          return $scope.getDownloads();
        });
      };
      return $scope.queueDownload = function(download) {
        if (!download.canQueue) {
          return;
        }
        return $http({
          method: "PUT",
          url: Server.service.build("/api/v1/downloads/" + download.id + "/queue"),
          dataType: "jsonp"
        }).success(function() {
          return $scope.getDownloads();
        });
      };
    }
  ]);

  app.controller("DialogController", [
    "$scope", "$rootScope", "$mdDialog", "$http", "Server", "Logging", function($scope, $rootScope, $mdDialog, $http, Server, Logging) {
      $scope.model = {
        url: "",
        http_username: "",
        http_password: ""
      };
      $scope.forms = {};
      $scope.error = null;
      $scope.save = function() {
        var data;
        Logging.debug("post");
        data = {
          download: $scope.model
        };
        return $http({
          method: "POST",
          url: Server.service.build("/api/v1/downloads.json"),
          data: data
        }).then(function() {
          $rootScope.$broadcast("reload");
          $rootScope.$emit("reload");
          $mdDialog.hide();
        }, function(message) {
          $scope.error = message.data.error;
        });
      };
      return $scope.close = function() {
        return $mdDialog.hide();
      };
    }
  ]);

}).call(this);
