// Generated by CoffeeScript 1.9.3
(function() {
  var Google, app;

  app = angular.module("opendirectories.controllers", []);

  Google = (function() {
    function Google(model) {
      this.model = model;
      this.server = "https://www.google.com/";
      this.path = "search";
      return;
    }

    Google.prototype.buildUrl = function() {
      return "" + this.server + this.path + "?q=" + (encodeURIComponent(this.buildQuery()));
    };

    Google.prototype.buildQuery = function() {
      var blacklistItem, i, len, queryString, ref;
      queryString = "";
      queryString = this.model.alternative ? "\"parent directory\" " : "intitle:\"index.of\" ";
      queryString += this.model.quoted ? " \"" + this.model.query + "\" " : this.model.query;
      queryString += " -html -htm -php -asp -jsp ";
      ref = this.model.blacklist;
      for (i = 0, len = ref.length; i < len; i++) {
        blacklistItem = ref[i];
        queryString += " -" + blacklistItem;
      }
      return "" + queryString + (this.buildExt());
    };

    Google.prototype.buildExt = function() {
      var queryType;
      queryType = this.model.queryTypes[this.model.queryType];
      if (queryType.exts === "") {
        return "";
      } else {
        return " (" + (queryType.exts.split(',').join("|")) + ") ";
      }
    };

    return Google;

  })();

  app.controller("appController", [
    "$scope", "$mdMedia", "$mdSidenav", "$timeout", "$location", "DEFAULT_SETTINGS", "Topbar", function($scope, $mdMedia, $mdSidenav, $timeout, $location, DEFAULT_SETTINGS, Topbar) {
      var loadFromChrome;
      $scope.model = {
        query: null,
        queryTypes: $.extend([], DEFAULT_SETTINGS.QUERY_TYPES),
        queryType: 0,
        alternative: false,
        quoted: true,
        incognito: true,
        blacklist: $.extend([], DEFAULT_SETTINGS.BLACKLIST)
      };
      $scope.Topbar = Topbar;
      Topbar.reset();
      Topbar.setTitle("Opendirectories");
      loadFromChrome = function() {
        chrome.storage.local.get("blacklist", function(data) {
          var i, item, len, ref, results;
          if (data.blacklist) {
            ref = JSON.parse(data.blacklist);
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              results.push($scope.model.blacklist.push(item));
            }
            return results;
          }
        });
        return chrome.storage.local.get("queryTypes", function(data) {
          var i, item, len, ref, results;
          if (data.queryTypes) {
            ref = JSON.parse(data.queryTypes);
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              results.push($scope.model.queryTypes.push(item));
            }
            return results;
          }
        });
      };
      loadFromChrome();
      $scope.$on("reload.chrome", function() {
        return loadFromChrome();
      });
      $scope.buildQuery = function() {
        return new Google($scope.model).buildQuery();
      };
      $scope.search = function() {
        if ($scope.model.query) {
          return chrome.windows.create({
            url: new Google($scope.model).buildUrl(),
            incognito: $scope.model.incognito
          });
        }
      };
      $scope.visit = function(url) {
        return $location.path(url);
      };
      return $timeout((function() {
        return $(".search #query").focus();
      }), 500);
    }
  ]);

}).call(this);
